{"ast":null,"code":"export const maskMoney = event => {\n  const {\n    value\n  } = event.currentTarget;\n  return value.replace(/\\D/g, '').replace(/(\\d)(\\d{2})$/, '$1,$2').replace(/(?=(\\d{3})+(\\D))\\B/g, '.');\n};\nexport const maskCPF = event => {\n  event.currentTarget.maxLength = 15;\n  const {\n    value\n  } = event.currentTarget;\n  return value.replace(/\\D/g, '').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d{1,2})/, '$1-$2').replace(/(-\\d{2})\\d+?$/, '$1');\n};\nexport const maskPhone = event => {\n  event.currentTarget.maxLength = 15;\n  const {\n    value\n  } = event.currentTarget;\n  return value.replace(/\\D/g, '').replace(/(\\d{2})(\\d)/, '($1) $2').replace(/(\\d{5})(\\d{4})/, '$1-$2');\n};\nexport const maskCEP = event => {\n  event.currentTarget.maxLength = 9;\n  const {\n    value\n  } = event.currentTarget;\n  return value.replace(/\\D/g, '').replace(/^(\\d{5})(\\d{3})+?$/, '$1-$2');\n};\nconst masks = {\n  cpf: maskCPF,\n  money: maskMoney,\n  phone: maskPhone,\n  cep: maskCEP\n};\nexport default masks;","map":{"version":3,"names":["maskMoney","event","value","currentTarget","replace","maskCPF","maxLength","maskPhone","maskCEP","masks","cpf","money","phone","cep"],"sources":["D:/apps/delivery-google-maps/client/src/lib/mask.ts"],"sourcesContent":["import * as React from 'react';\r\n\r\nexport const maskMoney = (event: React.FormEvent<HTMLInputElement>) => {\r\n  const { value } = event.currentTarget;\r\n  return value\r\n    .replace(/\\D/g, '')\r\n    .replace(/(\\d)(\\d{2})$/, '$1,$2')\r\n    .replace(/(?=(\\d{3})+(\\D))\\B/g, '.');\r\n};\r\n\r\nexport const maskCPF = (event: React.FormEvent<HTMLInputElement>) => {\r\n  event.currentTarget.maxLength = 15;\r\n  const { value } = event.currentTarget;\r\n\r\n  return value\r\n    .replace(/\\D/g, '')\r\n    .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n    .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n    .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n    .replace(/(-\\d{2})\\d+?$/, '$1');\r\n};\r\n\r\nexport const maskPhone = (event: React.FormEvent<HTMLInputElement>) => {\r\n  event.currentTarget.maxLength = 15;\r\n  const { value } = event.currentTarget;\r\n  return value\r\n    .replace(/\\D/g, '')\r\n    .replace(/(\\d{2})(\\d)/, '($1) $2')\r\n    .replace(/(\\d{5})(\\d{4})/, '$1-$2');\r\n};\r\n\r\nexport const maskCEP = (event: React.FormEvent<HTMLInputElement>) => {\r\n  event.currentTarget.maxLength = 9;\r\n  const { value } = event.currentTarget;\r\n  return value.replace(/\\D/g, '').replace(/^(\\d{5})(\\d{3})+?$/, '$1-$2');\r\n};\r\n\r\nexport type MaskTypes = 'cpf' | 'money' | 'phone' | 'cep';\r\n\r\ntype Masks = Record<\r\n  MaskTypes,\r\n  (event: React.FormEvent<HTMLInputElement>) => string\r\n>;\r\n\r\nconst masks: Masks = {\r\n  cpf: maskCPF,\r\n  money: maskMoney,\r\n  phone: maskPhone,\r\n  cep: maskCEP,\r\n};\r\n\r\nexport default masks;"],"mappings":"AAEA,OAAO,MAAMA,SAAS,GAAIC,KAAwC,IAAK;EACrE,MAAM;IAAEC;EAAM,CAAC,GAAGD,KAAK,CAACE,aAAa;EACrC,OAAOD,KAAK,CACTE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAChCA,OAAO,CAAC,qBAAqB,EAAE,GAAG,CAAC;AACxC,CAAC;AAED,OAAO,MAAMC,OAAO,GAAIJ,KAAwC,IAAK;EACnEA,KAAK,CAACE,aAAa,CAACG,SAAS,GAAG,EAAE;EAClC,MAAM;IAAEJ;EAAM,CAAC,GAAGD,KAAK,CAACE,aAAa;EAErC,OAAOD,KAAK,CACTE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAC/BA,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAC/BA,OAAO,CAAC,kBAAkB,EAAE,OAAO,CAAC,CACpCA,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC;AACnC,CAAC;AAED,OAAO,MAAMG,SAAS,GAAIN,KAAwC,IAAK;EACrEA,KAAK,CAACE,aAAa,CAACG,SAAS,GAAG,EAAE;EAClC,MAAM;IAAEJ;EAAM,CAAC,GAAGD,KAAK,CAACE,aAAa;EACrC,OAAOD,KAAK,CACTE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,CACjCA,OAAO,CAAC,gBAAgB,EAAE,OAAO,CAAC;AACvC,CAAC;AAED,OAAO,MAAMI,OAAO,GAAIP,KAAwC,IAAK;EACnEA,KAAK,CAACE,aAAa,CAACG,SAAS,GAAG,CAAC;EACjC,MAAM;IAAEJ;EAAM,CAAC,GAAGD,KAAK,CAACE,aAAa;EACrC,OAAOD,KAAK,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC;AACxE,CAAC;AASD,MAAMK,KAAY,GAAG;EACnBC,GAAG,EAAEL,OAAO;EACZM,KAAK,EAAEX,SAAS;EAChBY,KAAK,EAAEL,SAAS;EAChBM,GAAG,EAAEL;AACP,CAAC;AAED,eAAeC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}